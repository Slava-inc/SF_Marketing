import json
import random
import re
from database_requests import Execute


class KeyBoardBot:
    def __init__(self):
        self.execute = Execute()

    @staticmethod
    async def get_first_menu(history: list) -> dict:
        if len(history) > 1:
            button_first_keyboard = {'goal': '–¶–µ–ª–∏ üéØ',
                                     'outlay': '–†–∞—Å—Ö–æ–¥—ã üßÆ',
                                     'income': '–î–æ—Ö–æ–¥—ã üí∞',
                                     'virtual_assistant': '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ü§ñ',
                                     'back': '–ù–∞–∑–∞–¥ üîô'}
        else:
            button_first_keyboard = {'goal': '–¶–µ–ª–∏ üéØ',
                                     'outlay': '–†–∞—Å—Ö–æ–¥—ã üßÆ',
                                     'income': '–î–æ—Ö–æ–¥—ã üí∞',
                                     'virtual_assistant': '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ü§ñ'}
        return button_first_keyboard

    @staticmethod
    async def get_goal_menu():
        button_goal_keyboard = {'add_new_goal': '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å ‚ûï',
                                'show_goal': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π üëÄ',
                                'back': '–ù–∞–∑–∞–¥ üîô'}
        return button_goal_keyboard

    @staticmethod
    async def get_outlay_menu():
        button_outlay_keyboard = {'add_new_outlay': '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã ‚ûï',
                                  'show_outlay': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ üëÄ',
                                  'analytic_outlay': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ üìä',
                                  'back': '–ù–∞–∑–∞–¥ üîô'}
        return button_outlay_keyboard

    @staticmethod
    async def get_income_menu():
        button_income_keyboard = {'add_new_income': '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Ö–æ–¥—ã ‚ûï',
                                  'show_income': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤ üëÄ',
                                  'analytic_income': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ üìä',
                                  'back': '–ù–∞–∑–∞–¥ üîô'}
        return button_income_keyboard

    @staticmethod
    async def get_keyboard_outlay() -> dict:
        button_outlay_keyboard = {'auto': '–ê–≤—Ç–æ–º–æ–±–∏–ª—å üèéÔ∏è',
                                  'business': '–ë–∏–∑–Ω–µ—Å  üë®‚Äçüíº',
                                  'souvenir': '–ü–æ–¥–∞—Ä–∫–∏ üéÅ',
                                  'home_appliances': '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ üìª',
                                  'children': '–î–µ—Ç–∏ üë∂',
                                  'pets': '–î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µüê±üêï',
                                  'health ': '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –∫—Ä–∞—Å–æ—Ç–∞ üíä',
                                  'loans': '–ò–ø–æ—Ç–µ–∫–∞, –¥–æ–ª–≥–∏, –∫—Ä–µ–¥–∏—Ç—ã üí≥',
                                  'communal': '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ üè†',
                                  'taxes': '–ù–∞–ª–æ–≥–∏ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ üìí',
                                  'education': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ üßë‚Äçüéì',
                                  'clothes': '–û–¥–µ–∂–¥–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã üëíüëó',
                                  'relax': '–û—Ç–¥—ã—Ö –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ üèñÔ∏è',
                                  'food': '–ü–∏—Ç–∞–Ω–∏–µ üç¥ü•Ñ',
                                  'repair': '–†–µ–º–æ–Ω—Ç –∏ –º–µ–±–µ–ª—å üõèüõÅ',
                                  'household ': '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ üßºüßπ',
                                  'transport': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç üöåüöá',
                                  'hobby': '–•–æ–±–±–∏ üé©',
                                  'connection': '–°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç üåè',
                                  'no_name': '–ü—Ä–æ—á–∏–µ üìã',
                                  'back': '–ù–∞–∑–∞–¥ üîô'}
        return button_outlay_keyboard

    @staticmethod
    async def get_bank() -> dict:
        bank_keyboard = {'–°–±–µ—Ä–±–∞–Ω–∫': '–°–±–µ—Ä–±–∞–Ω–∫',
                         '–í–¢–ë': '–í–¢–ë',
                         '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫': '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
                         '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
                         '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫': '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫',
                         '–ú–ö–ë': '–ú–ö–ë',
                         '–°–æ–≤–∫–æ–º–±–∞–Ω–∫ ': '–°–æ–≤–∫–æ–º–±–∞–Ω–∫',
                         '–¢-–ë–∞–Ω–∫': '–¢-–ë–∞–Ω–∫',
                         '–†–æ—Å–±–∞–Ω–∫': '–†–æ—Å–±–∞–Ω–∫',
                         '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω –ë–∞–Ω–∫': '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω –ë–∞–Ω–∫',
                         '–û—Ç–∫—Ä—ã—Ç–∏–µ': '–û—Ç–∫—Ä—ã—Ç–∏–µ',
                         '–ê–∫ –ë–∞—Ä—Å –ë–∞–Ω–∫': '–ê–∫ –ë–∞—Ä—Å –ë–∞–Ω–∫',
                         '–Æ–Ω–∏–ö—Ä–µ–¥–∏—Ç –ë–∞–Ω–∫ ': '–Æ–Ω–∏–ö—Ä–µ–¥–∏—Ç –ë–∞–Ω–∫',
                         '–°–∏—Ç–∏–±–∞–Ω–∫': '–°–∏—Ç–∏–±–∞–Ω–∫',
                         '–£—Ä–∞–ª—Å–∏–±': '–£—Ä–∞–ª—Å–∏–±',
                         '–ü–æ—á—Ç–∞ –ë–∞–Ω–∫': '–ü–æ—á—Ç–∞ –ë–∞–Ω–∫',
                         '–¢–æ—á–∫–∞': '–¢–æ—á–∫–∞',
                         '–ù–∞–ª–∏—á–Ω—ã–µ': '–ù–∞–ª–∏—á–Ω—ã–µ',
                         'back': '–ù–∞–∑–∞–¥ üîô'}
        return bank_keyboard

    @staticmethod
    async def text_for_news() -> str:
        text = ['–ù–µ –±—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–µ–π —Ä–∞—Å—Ö–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –±—ã –≤–∞–∂–Ω—ã –¥–ª—è –≤–∞—Å. –ß—Ç–æ–±—ã —Ç—Ä–∞—Ç–∏—Ç—å –º–µ–Ω—å—à–µ —Å–ª–µ–¥—É–µ—Ç '
                '—Å–æ–∫—Ä–∞—â–∞—Ç—å –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥—Ä—É–≥ –¥—Ä—É–≥—É, —Ç.–µ. –≤—ã—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –∫–∞–∂–¥–æ–π —Å—Ç–∞—Ç—å–∏ '
                '–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏.',
                '–ù–∞–∏–±–æ–ª—å—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–ª–µ–∂–∞—Ç —Ç–µ —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                '—Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞, —Ç.–∫. —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –Ω–∏–º, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å.',
                '–ù–µ –Ω—É–∂–Ω–æ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–∞–º –≤–µ—â–µ–π, —Ä–∞–∑—Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–∫ —ç–∫–æ–Ω–æ–º–Ω—ã–µ, –∏–ª–∏ –æ–ø—Ç–æ–≤—ã–º –∑–∞–∫—É–ø–∫–∞–º. '
                '–ü—Å–∏—Ö–∏–∫–∞ —á–µ–ª–æ–≤–µ–∫–∞ —É—Å—Ç—Ä–æ–µ–Ω–∞ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ –∑–∞ —Å—á—ë—Ç –∫–∞–∂—É—â–µ–π—Å—è –¥–µ—à–µ–≤–∏–∑–Ω—ã –∏–ª–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–π '
                '—Å–∫–∏–¥–∫–∏ –æ–Ω –±—É–¥–µ—Ç –Ω–µ–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –±–æ–ª—å—à–µ, –∞ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∏ '
                '—Ç—Ä–∞—Ç–∏—Ç—å –æ–Ω –±—É–¥–µ—Ç –±–æ–ª—å—à–µ.',
                '–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì –∑–∞–ª–æ–≥ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è, –Ω–∞–ª–∏—á–∏—è ¬´–ø–æ–¥—É—à–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏¬ª –≤ '
                '–Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏—á—å –º–Ω–æ–≥–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π, –∏ –¥–∞–∂–µ —Å—Ç–∞—Ç—å '
                '—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º.',
                '–ß—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º, –µ—Å–ª–∏ —É–∂ –Ω–µ –∫–æ –≤—Å–µ–º—É, —Ç–æ –∫–æ –º–Ω–æ–≥–æ–º—É, –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å —á—ë—Ç–∫–æ–µ '
                '–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å –≤ —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å–≤–æ—é '
                '—Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π. –í—Å—ë —ç—Ç–æ –∏ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.',
                '–õ—É—á—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–æ–∫ —Å–≤–æ–µ–≥–æ –±—é–¥–∂–µ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—á–∞–ª–æ –≥–æ–¥–∞. '
                '–ù–æ, –∫–æ–Ω–µ—á–Ω–æ –∂–µ, –∂–¥–∞—Ç—å –µ–≥–æ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –Ω—É–∂–Ω–æ. –ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –¥–µ–ª—É —Å—Ä–∞–∑—É –∂–µ: '
                '–æ–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏, –ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è, –∏—â–∏—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã. '
                '–≠—Ç–æ —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º –ø–µ—Ä–≤—ã–º —à–∞–≥–æ–º –∫ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—é –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—é.',
                '–ì—Ä–∞–º–æ—Ç–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–≤–æ–µ–º—É –±—é–¥–∂–µ—Ç—É –¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏, —Å—Ç–∏–º—É–ª–æ–º –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É, '
                '–∫–∞—Ä—å–µ—Ä–Ω–æ–º—É –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º—É —Ä–æ—Å—Ç—É; –Ω–∞–≤—ã–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–∞—à–∏–º –≤–µ—Ä–Ω—ã–º —Å–ø—É—Ç–Ω–∏–∫–æ–º –∏ –≥–∞—Ä–∞–Ω—Ç–æ–º '
                '—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ª—é–±–æ–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.',
                '–í–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –∂–µ—Å—Ç–∫–∏—Ö –ø—Ä–∞–≤–∏–ª, –ª—É—á—à–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å '
                '–ø—Ä–æ—Ü–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç—Å—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü. –ë–µ–∑ —É—â–µ—Ä–±–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è –∂–∏–∑–Ω–∏.',
                '–ò–Ω–æ–≥–¥–∞ –º–µ–ª–∫–∏–µ —Ç—Ä–∞—Ç—ã –Ω–∞ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è ‚Äî —Å—Ç–∞–∫–∞–Ω—á–∏–∫ –∫–æ—Ñ–µ –∏–ª–∏ –∫–∏–Ω–æ ‚Äî –∏–≥—Ä–∞—é—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ –Ω–∞—à–µ–º '
                '–ø—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –¥–∞ –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–≥–∞—é—Ç —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è. '
                '–í–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –º–µ–ª–∫–∏—Ö —Ç—Ä–∞—Ç, –ª—É—á—à–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –Ω–∞ –Ω–∏—Ö –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º–∏ '
                '—Ä–∞—Å—Ö–æ–¥–∞–º–∏ –≤ —Ü–µ–ª–æ–º.',
                '–ò–Ω–æ–≥–¥–∞ –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ —Ü–µ–Ω–µ –Ω–∞ 50% –¥–µ—à–µ–≤–ª–µ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è ¬´–º—É—Å–æ—Ä–æ–º¬ª, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–∫–æ—Ä–µ –ø—Ä–∏–¥–µ—Ç—Å—è '
                '–∑–∞–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–∞–∂–µ –≤—ã–±—Ä–æ—Å–∏—Ç—å. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–∞—Å–∞–µ—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ —É—Ü–µ–Ω–∫–µ –ø–µ—Ä–≤–æ–π —Å–≤–µ–∂–µ—Å—Ç–∏ '
                '—Ç–æ—á–Ω–æ –Ω–µ –±—É–¥—É—Ç. –í–º–µ—Å—Ç–æ —Ç–æ—Ç–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ –ª—É—á—à–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —É–º–æ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, '
                '–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –∏ —Å—Ç–æ–∏—Ç –ª–∏ –æ–Ω —Å–≤–æ–∏—Ö –¥–µ–Ω–µ–≥.',
                '–õ—É—á—à–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å—Å—è –æ–¥–Ω–æ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ–π, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å, –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–µ –Ω–µ '
                '–¥–ª—è –Ω–∞–±–æ—Ä–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤, –∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤ –æ–ø–ª–∞—Ç–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤.',
                '–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–æ –Ω–µ —Å—Ç–æ–∏—Ç —Ä–∏—Å–∫–æ–≤–∞—Ç—å –≤—Å–µ–π —Å–≤–æ–µ–π '
                '—Å–≤–æ–±–æ–¥–Ω–æ–π –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—å—é. –í—Å–µ–≥–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. '
                '–õ—É—á—à–µ —Ä–∞–∑—É–º–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ —Å —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º —Ä–∏—Å–∫–∞. '
                '–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –ø–æ–º–æ–∂–µ—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥ –∏ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–µ—Ä–∏.']
        return random.choice(text)

    async def text_for_reminder(self, dict_info_goal: dict) -> str:
        duration = int(dict_info_goal['duration'])
        monthly_payment = str(int(int(dict_info_goal['sum_goal']) / duration))
        weekday = await self.get_str_weekday(dict_info_goal['reminder_days'])
        time_reminder = dict_info_goal['reminder_time']
        data_in_message = f"{dict_info_goal['data_finish'].split('-')[2]}." \
                          f"{dict_info_goal['data_finish'].split('-')[1]}." \
                          f"{dict_info_goal['data_finish'].split('-')[0]} –≥."
        text = f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–æ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –í—ã –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π –ø–æ—Å—Ç–∞–≤–∏–ª–∏:\n" \
               f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–∏: {self.format_text(dict_info_goal['goal_name'])}\n" \
               f"–°—É–º–º–∞ —Ü–µ–ª–∏: {self.format_text(str(int(dict_info_goal['sum_goal'])))} ‚ÇΩ\n" \
               f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {self.format_text(data_in_message)}" \
               f"–°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: {self.format_text(str(duration))} –º–µ—Å.\n" \
               f"–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü –Ω—É–∂–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å: {self.format_text(monthly_payment)} ‚ÇΩ\n" \
               f"–î–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ü–µ–ª–∏: {self.format_text(weekday)}\n" \
               f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ü–µ–ª–∏: {self.format_text(time_reminder)}"
        return text

    async def get_info_goal(self, list_info_goal: list) -> str:
        duration = int(list_info_goal[5])
        monthly_payment = str(int(int(list_info_goal[2]) / duration))
        list_reminder_days = await self.get_dict_reminder_days(list_info_goal[6])
        weekday = await self.get_str_weekday(list_reminder_days)
        time_reminder = list_info_goal[7]
        data_in_message = f"{list_info_goal[8].split('-')[2]}." \
                          f"{list_info_goal[8].split('-')[1]}." \
                          f"{list_info_goal[8].split('-')[0]} –≥."
        text = f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–∏: {self.format_text(list_info_goal[1])}\n" \
               f"–°—É–º–º–∞ —Ü–µ–ª–∏: {self.format_text(str(int(list_info_goal[2])))} ‚ÇΩ\n" \
               f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {self.format_text(data_in_message)}\n" \
               f"–°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: {self.format_text(str(duration))} –º–µ—Å.\n" \
               f"–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü –Ω—É–∂–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å: {self.format_text(monthly_payment)} ‚ÇΩ\n" \
               f"–î–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ü–µ–ª–∏: {self.format_text(weekday)}\n" \
               f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ü–µ–ª–∏: {self.format_text(time_reminder)}"
        return text

    async def get_info_outlay(self, list_info_outlay: list) -> str:
        data_time = list_info_outlay[1]
        sum_outlay = int(list_info_outlay[2])
        name_bank = list_info_outlay[3]
        recipient_funds = list_info_outlay[4]
        value_category_out = list_info_outlay[5]
        str_category_out = await self.execute.get_name_category_outlay(value_category_out)
        text = f"–î–∞—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {self.format_text(data_time)}\n" \
               f"–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {self.format_text(str(sum_outlay))} ‚ÇΩ\n" \
               f"–°–ø–æ—Å–æ–± —Å–ø–∏—Å–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤: {self.format_text(name_bank)}\n" \
               f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {self.format_text(recipient_funds)}\n" \
               f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤: {self.format_text(str_category_out)}"
        return text

    async def get_info_income(self, list_info_income: list) -> str:
        data_time = list_info_income[1]
        sum_income = int(list_info_income[2])
        name_bank = list_info_income[3]
        sender_funds = list_info_income[4]
        value_category_in = list_info_income[5]
        str_category_in = await self.execute.get_name_category_income(value_category_in)
        text = f"–î–∞—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤: {self.format_text(data_time)}\n" \
               f"–°—É–º–º–∞ –¥–æ—Ö–æ–¥–æ–≤: {self.format_text(str(sum_income))} ‚ÇΩ\n" \
               f"–°–ø–æ—Å–æ–± –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤: {self.format_text(name_bank)}\n" \
               f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {self.format_text(sender_funds)}\n" \
               f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤: {self.format_text(str_category_in)}"
        return text

    @staticmethod
    async def get_calculater() -> dict:
        calculater = {'1': '1‚É£', '2': '2‚É£', '3': '3‚É£',
                      '4': '4‚É£', '5': '5‚É£', '6': '6‚É£',
                      '7': '7‚É£', '8': '8Ô∏è‚É£', '9': '9‚É£',
                      'minus': '‚ûñ', '0': '0Ô∏è‚É£', 'plus': '‚ûï',
                      'back': '–ù–∞–∑–∞–¥ üîô', 'delete': '‚å´'}
        return calculater

    @staticmethod
    def format_text(text_message: str) -> str:
        cleaner = re.compile('<.*?>|&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')
        clean_text = re.sub(cleaner, '', text_message)
        return f'<b>{clean_text}</b>'

    @staticmethod
    async def get_weekday() -> dict:
        dict_weekday = {'MON': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'TUE': '–í—Ç–æ—Ä–Ω–∏–∫', 'WED': '–°—Ä–µ–¥–∞', 'THU': '–ß–µ—Ç–≤–µ—Ä–≥', 'FRI': '–ü—è—Ç–Ω–∏—Ü–∞',
                        'SAT': '–°—É–±–±–æ—Ç–∞', 'back': '–ù–∞–∑–∞–¥ üîô', 'SUN': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}
        return dict_weekday

    @staticmethod
    async def get_time_reminder() -> dict:
        dict_time = {'06:00': '06:00', '07:00': '07:00', '08:00': '08:00', '09:00': '09:00', '10:00': '10:00',
                     '11:00': '11:00', '12:00': '12:00', '13:00': '13:00', '14:00': '14:00', '15:00': '15:00',
                     '16:00': '16:00', '17:00': '17:00', '18:00': '18:00', '19:00': '19:00', '20:00': '20:00',
                     'back': '–ù–∞–∑–∞–¥ üîô', '21:00': '21:00', '22:00': '22:00', '23:00': '23:00', '00:00': '00:00'}
        return dict_time

    @property
    def get_pages_goal(self):
        dict_pages = {}
        for item in range(100):
            dict_pages['–¶–µ–ª–∏ –°—Ç—Ä.' + str(item)] = str(item)
        return dict_pages

    @property
    def get_pages_outlay(self):
        dict_pages = {}
        for item in range(100):
            dict_pages['–†–∞—Å—Ö–æ–¥—ã –°—Ç—Ä.' + str(item)] = str(item)
        return dict_pages

    @property
    def get_pages_income(self):
        dict_pages = {}
        for item in range(100):
            dict_pages['–î–æ—Ö–æ–¥—ã –°—Ç—Ä.' + str(item)] = str(item)
        return dict_pages

    async def get_str_weekday(self, dict_reminder_days: dict) -> str:
        dict_weekday = await self.get_weekday()
        list_weekday = []
        for key, item in dict_reminder_days.items():
            if item:
                list_weekday.append(dict_weekday[key])
        if len(list_weekday) == 0:
            weekday = '–ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Ü–µ–ª–∏'
        else:
            weekday = ', '.join(list_weekday)
        return weekday

    @staticmethod
    async def get_dict_reminder_days(string: str) -> dict:
        reminder_days = json.loads(string)
        return reminder_days
